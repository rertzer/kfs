#ifndef GDT_H
#define GDT_H
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#define GDT_BUFFER 0xC0000800
#define GDT_MAX_ENTRIES 1024
#define GDT_ENTRIES_NB 8

#define GDT_FLAG_32_BIT_PROTECTED 0x04
#define GDT_FLAG_4KB_GRANULARITY 0x08
#define GDT_FLAGS GDT_FLAG_32_BIT_PROTECTED | GDT_FLAG_4KB_GRANULARITY

#define GDT_PRESENT_SHIFT 7
#define GDT_DPL_SHIFT 5
#define GDT_S_SHIFT 4
#define GDT_E_SHIFT 3
#define GDT_DC_SHIFT 2
#define GDT_RW_SHIFT 1

#define GDT_PRESENT 1 << GDT_PRESENT_SHIFT
#define GDT_ABSENT 0 << GDT_PRESENT_SHIFT
#define GDT_KERNEL 0 << GDT_DPL_SHIFT
#define GDT_USER 3 << GDT_DPL_SHIFT
#define GDT_CODE_OR_DATA 1 << GDT_S_SHIFT
#define GDT_EXECUTABLE 1 << GDT_E_SHIFT
#define GDT_DATA 0 << GDT_E_SHIFT
#define GDT_NONCONFORMING 0 << GDT_DC_SHIFT
#define GDT_DIRECTION_UP 0 << GDT_DC_SHIFT
#define GDT_DIRECTION_DOWN 1 << GDT_DC_SHIFT
#define GDT_READABLE 1 << GDT_RW_SHIFT
#define GDT_WRITABLE 1 << GDT_RW_SHIFT

#define GDT_KERNEL_CODE_ACCESS \
	GDT_PRESENT | GDT_KERNEL | GDT_CODE_OR_DATA | GDT_EXECUTABLE | GDT_NONCONFORMING | GDT_READABLE
#define GDT_KERNEL_DATA_ACCESS GDT_PRESENT | GDT_KERNEL | GDT_CODE_OR_DATA | GDT_DATA | GDT_DIRECTION_UP | GDT_WRITABLE
#define GDT_KERNEL_STACK_ACCESS \
	GDT_PRESENT | GDT_KERNEL | GDT_CODE_OR_DATA | GDT_DATA | GDT_DIRECTION_DOWN | GDT_WRITABLE
#define GDT_USER_CODE_ACCESS \
	GDT_PRESENT | GDT_USER | GDT_CODE_OR_DATA | GDT_EXECUTABLE | GDT_NONCONFORMING | GDT_READABLE
#define GDT_USER_DATA_ACCESS GDT_PRESENT | GDT_USER | GDT_CODE_OR_DATA | GDT_DATA | GDT_DIRECTION_UP | GDT_WRITABLE
#define GDT_USER_STACK_ACCESS GDT_PRESENT | GDT_USER | GDT_CODE_OR_DATA | GDT_DATA | GDT_DIRECTION_DOWN | GDT_WRITABLE
#define GDT_BAD_STACK_ACCESS GDT_KERNEL | GDT_CODE_OR_DATA | GDT_DATA | GDT_DIRECTION_DOWN | GDT_WRITABLE

typedef enum {
	NULL_DESCRIPTOR,
	KERNEL_CODE_DESC,
	KERNEL_DATA_DESC,
	KERNEL_STACK_DESC,
	USER_CODE_DESC,
	USER_DATA_DESC,
	USER_STACK_DESC,
	BAD_STACK_DESC,
	TSS_PLACEHOLDER,
	TSS_ZERO,
	INIT_DESCRIPTOR_NB
} init_gdt_descriptor_e;

typedef struct {
	uint32_t base;
	uint32_t limit;
	uint8_t	 access;
	uint8_t	 flags;
} gdt_descriptor_t;

typedef union gdt_entry_u {
	uint64_t desc;
	uint8_t	 bytes[8];
} gdt_entry_t;

void			 init_gdt();
void			 set_gdt(uint32_t limit, uint32_t base);
gdt_descriptor_t get_gdt_desc(init_gdt_descriptor_e d);
void			 print_gdt_descriptor(init_gdt_descriptor_e d);
#endif
